// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.ProjectCronos
{
    public sealed class SaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProjectCronos.SaveData>
    {
        // playTime
        private static global::System.ReadOnlySpan<byte> GetSpan_playTime() => new byte[1 + 8] { 168, 112, 108, 97, 121, 84, 105, 109, 101 };
        // lastSaveTime
        private static global::System.ReadOnlySpan<byte> GetSpan_lastSaveTime() => new byte[1 + 12] { 172, 108, 97, 115, 116, 83, 97, 118, 101, 84, 105, 109, 101 };
        // playerSaveData
        private static global::System.ReadOnlySpan<byte> GetSpan_playerSaveData() => new byte[1 + 14] { 174, 112, 108, 97, 121, 101, 114, 83, 97, 118, 101, 68, 97, 116, 97 };
        // saveAreaInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_saveAreaInfo() => new byte[1 + 12] { 172, 115, 97, 118, 101, 65, 114, 101, 97, 73, 110, 102, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ProjectCronos.SaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_playTime());
            writer.Write(value.playTime);
            writer.WriteRaw(GetSpan_lastSaveTime());
            writer.Write(value.lastSaveTime);
            writer.WriteRaw(GetSpan_playerSaveData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ProjectCronos.PlayerSaveData>(formatterResolver).Serialize(ref writer, value.playerSaveData, options);
            writer.WriteRaw(GetSpan_saveAreaInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ProjectCronos.SaveAreaInfo>(formatterResolver).Serialize(ref writer, value.saveAreaInfo, options);
        }

        public global::ProjectCronos.SaveData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __playTime__ = default(long);
            var __lastSaveTime__ = default(long);
            var __playerSaveData__ = default(global::ProjectCronos.PlayerSaveData);
            var __saveAreaInfo__ = default(global::ProjectCronos.SaveAreaInfo);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308613581826780272UL) { goto FAIL; }

                        __playTime__ = reader.ReadInt64();
                        continue;
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7311138056146477420UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701669204UL) { goto FAIL; }

                                __lastSaveTime__ = reader.ReadInt64();
                                continue;

                            case 7018141219527483763UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1868983881UL) { goto FAIL; }

                                __saveAreaInfo__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ProjectCronos.SaveAreaInfo>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_playerSaveData().Slice(1))) { goto FAIL; }

                        __playerSaveData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ProjectCronos.PlayerSaveData>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::ProjectCronos.SaveData(__playTime__, __lastSaveTime__, __playerSaveData__, __saveAreaInfo__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
