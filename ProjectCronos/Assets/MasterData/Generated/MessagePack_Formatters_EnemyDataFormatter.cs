// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class EnemyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::EnemyData>
    {
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // MaxHp
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxHp() => new byte[1 + 5] { 165, 77, 97, 120, 72, 112 };
        // TimeHpHealPerSeconds
        private static global::System.ReadOnlySpan<byte> GetSpan_TimeHpHealPerSeconds() => new byte[1 + 20] { 180, 84, 105, 109, 101, 72, 112, 72, 101, 97, 108, 80, 101, 114, 83, 101, 99, 111, 110, 100, 115 };
        // MaxMp
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxMp() => new byte[1 + 5] { 165, 77, 97, 120, 77, 112 };
        // TimeMpHealPerSeconds
        private static global::System.ReadOnlySpan<byte> GetSpan_TimeMpHealPerSeconds() => new byte[1 + 20] { 180, 84, 105, 109, 101, 77, 112, 72, 101, 97, 108, 80, 101, 114, 83, 101, 99, 111, 110, 100, 115 };
        // Attack
        private static global::System.ReadOnlySpan<byte> GetSpan_Attack() => new byte[1 + 6] { 166, 65, 116, 116, 97, 99, 107 };
        // MagicAttack
        private static global::System.ReadOnlySpan<byte> GetSpan_MagicAttack() => new byte[1 + 11] { 171, 77, 97, 103, 105, 99, 65, 116, 116, 97, 99, 107 };
        // Defense
        private static global::System.ReadOnlySpan<byte> GetSpan_Defense() => new byte[1 + 7] { 167, 68, 101, 102, 101, 110, 115, 101 };
        // MagicDefense
        private static global::System.ReadOnlySpan<byte> GetSpan_MagicDefense() => new byte[1 + 12] { 172, 77, 97, 103, 105, 99, 68, 101, 102, 101, 110, 115, 101 };
        // AiThinkingIntervalTime
        private static global::System.ReadOnlySpan<byte> GetSpan_AiThinkingIntervalTime() => new byte[1 + 22] { 182, 65, 105, 84, 104, 105, 110, 107, 105, 110, 103, 73, 110, 116, 101, 114, 118, 97, 108, 84, 105, 109, 101 };
        // AttackDist
        private static global::System.ReadOnlySpan<byte> GetSpan_AttackDist() => new byte[1 + 10] { 170, 65, 116, 116, 97, 99, 107, 68, 105, 115, 116 };
        // SearchDist
        private static global::System.ReadOnlySpan<byte> GetSpan_SearchDist() => new byte[1 + 10] { 170, 83, 101, 97, 114, 99, 104, 68, 105, 115, 116 };
        // MoveSpeed
        private static global::System.ReadOnlySpan<byte> GetSpan_MoveSpeed() => new byte[1 + 9] { 169, 77, 111, 118, 101, 83, 112, 101, 101, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::EnemyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Key());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Key, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_MaxHp());
            writer.Write(value.MaxHp);
            writer.WriteRaw(GetSpan_TimeHpHealPerSeconds());
            writer.Write(value.TimeHpHealPerSeconds);
            writer.WriteRaw(GetSpan_MaxMp());
            writer.Write(value.MaxMp);
            writer.WriteRaw(GetSpan_TimeMpHealPerSeconds());
            writer.Write(value.TimeMpHealPerSeconds);
            writer.WriteRaw(GetSpan_Attack());
            writer.Write(value.Attack);
            writer.WriteRaw(GetSpan_MagicAttack());
            writer.Write(value.MagicAttack);
            writer.WriteRaw(GetSpan_Defense());
            writer.Write(value.Defense);
            writer.WriteRaw(GetSpan_MagicDefense());
            writer.Write(value.MagicDefense);
            writer.WriteRaw(GetSpan_AiThinkingIntervalTime());
            writer.Write(value.AiThinkingIntervalTime);
            writer.WriteRaw(GetSpan_AttackDist());
            writer.Write(value.AttackDist);
            writer.WriteRaw(GetSpan_SearchDist());
            writer.Write(value.SearchDist);
            writer.WriteRaw(GetSpan_MoveSpeed());
            writer.Write(value.MoveSpeed);
        }

        public global::EnemyData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Key__ = default(string);
            var __Name__ = default(string);
            var __MaxHp__ = default(int);
            var __TimeHpHealPerSeconds__ = default(int);
            var __MaxMp__ = default(int);
            var __TimeMpHealPerSeconds__ = default(int);
            var __Attack__ = default(int);
            var __MagicAttack__ = default(int);
            var __Defense__ = default(int);
            var __MagicDefense__ = default(int);
            var __AiThinkingIntervalTime__ = default(float);
            var __AttackDist__ = default(float);
            var __SearchDist__ = default(float);
            var __MoveSpeed__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        __Key__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 482252185933UL:
                                __MaxHp__ = reader.ReadInt32();
                                continue;
                            case 482336072013UL:
                                __MaxMp__ = reader.ReadInt32();
                                continue;
                        }
                    case 20:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7298206652395514196UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TimeHpHealPerSeconds().Slice(1 + 8))) { goto FAIL; }

                                __TimeHpHealPerSeconds__ = reader.ReadInt32();
                                continue;

                            case 7298206673870350676UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TimeMpHealPerSeconds().Slice(1 + 8))) { goto FAIL; }

                                __TimeMpHealPerSeconds__ = reader.ReadInt32();
                                continue;

                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 118074580956225UL) { goto FAIL; }

                        __Attack__ = reader.ReadInt32();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MagicAttack().Slice(1))) { goto FAIL; }

                        __MagicAttack__ = reader.ReadInt32();
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28555890632582468UL) { goto FAIL; }

                        __Defense__ = reader.ReadInt32();
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MagicDefense().Slice(1))) { goto FAIL; }

                        __MagicDefense__ = reader.ReadInt32();
                        continue;
                    case 22:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AiThinkingIntervalTime().Slice(1))) { goto FAIL; }

                        __AiThinkingIntervalTime__ = reader.ReadSingle();
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7585305746979714113UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29811UL) { goto FAIL; }

                                __AttackDist__ = reader.ReadSingle();
                                continue;

                            case 7585302448728794451UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29811UL) { goto FAIL; }

                                __SearchDist__ = reader.ReadSingle();
                                continue;

                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MoveSpeed().Slice(1))) { goto FAIL; }

                        __MoveSpeed__ = reader.ReadSingle();
                        continue;

                }
            }

            var ____result = new global::EnemyData(__Key__, __Name__, __MaxHp__, __TimeHpHealPerSeconds__, __MaxMp__, __TimeMpHealPerSeconds__, __Attack__, __MagicAttack__, __Defense__, __MagicDefense__, __AiThinkingIntervalTime__, __AttackDist__, __SearchDist__, __MoveSpeed__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
