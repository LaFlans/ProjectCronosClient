// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class ItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ItemData>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };
        // Category
        private static global::System.ReadOnlySpan<byte> GetSpan_Category() => new byte[1 + 8] { 168, 67, 97, 116, 101, 103, 111, 114, 121 };
        // Path
        private static global::System.ReadOnlySpan<byte> GetSpan_Path() => new byte[1 + 4] { 164, 80, 97, 116, 104 };
        // BasePrice
        private static global::System.ReadOnlySpan<byte> GetSpan_BasePrice() => new byte[1 + 9] { 169, 66, 97, 115, 101, 80, 114, 105, 99, 101 };
        // EffectValue1
        private static global::System.ReadOnlySpan<byte> GetSpan_EffectValue1() => new byte[1 + 12] { 172, 69, 102, 102, 101, 99, 116, 86, 97, 108, 117, 101, 49 };
        // EffectValue2
        private static global::System.ReadOnlySpan<byte> GetSpan_EffectValue2() => new byte[1 + 12] { 172, 69, 102, 102, 101, 99, 116, 86, 97, 108, 117, 101, 50 };
        // EffectValue3
        private static global::System.ReadOnlySpan<byte> GetSpan_EffectValue3() => new byte[1 + 12] { 172, 69, 102, 102, 101, 99, 116, 86, 97, 108, 117, 101, 51 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
            writer.WriteRaw(GetSpan_Category());
            writer.Write(value.Category);
            writer.WriteRaw(GetSpan_Path());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Path, options);
            writer.WriteRaw(GetSpan_BasePrice());
            writer.Write(value.BasePrice);
            writer.WriteRaw(GetSpan_EffectValue1());
            writer.Write(value.EffectValue1);
            writer.WriteRaw(GetSpan_EffectValue2());
            writer.Write(value.EffectValue2);
            writer.WriteRaw(GetSpan_EffectValue3());
            writer.Write(value.EffectValue3);
        }

        public global::ItemData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __Category__ = default(int);
            var __Path__ = default(string);
            var __BasePrice__ = default(int);
            var __EffectValue1__ = default(int);
            var __EffectValue2__ = default(int);
            var __EffectValue3__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1752457552UL:
                                __Path__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Description().Slice(1))) { goto FAIL; }

                        __Description__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8751179515808735555UL) { goto FAIL; }

                        __Category__ = reader.ReadInt32();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BasePrice().Slice(1))) { goto FAIL; }

                        __BasePrice__ = reader.ReadInt32();
                        continue;
                    case 12:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7013921439927920197UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 828732780UL:
                                        __EffectValue1__ = reader.ReadInt32();
                                        continue;
                                    case 845509996UL:
                                        __EffectValue2__ = reader.ReadInt32();
                                        continue;
                                    case 862287212UL:
                                        __EffectValue3__ = reader.ReadInt32();
                                        continue;
                                }

                        }

                }
            }

            var ____result = new global::ItemData(__Id__, __Name__, __Description__, __Category__, __Path__, __BasePrice__, __EffectValue1__, __EffectValue2__, __EffectValue3__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
