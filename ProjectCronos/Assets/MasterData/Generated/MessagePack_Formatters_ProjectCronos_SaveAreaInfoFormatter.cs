// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.ProjectCronos
{
    public sealed class SaveAreaInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ProjectCronos.SaveAreaInfo>
    {
        // savePointId
        private static global::System.ReadOnlySpan<byte> GetSpan_savePointId() => new byte[1 + 11] { 171, 115, 97, 118, 101, 80, 111, 105, 110, 116, 73, 100 };
        // respawnPosition
        private static global::System.ReadOnlySpan<byte> GetSpan_respawnPosition() => new byte[1 + 15] { 175, 114, 101, 115, 112, 97, 119, 110, 80, 111, 115, 105, 116, 105, 111, 110 };
        // respawnRotation
        private static global::System.ReadOnlySpan<byte> GetSpan_respawnRotation() => new byte[1 + 15] { 175, 114, 101, 115, 112, 97, 119, 110, 82, 111, 116, 97, 116, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ProjectCronos.SaveAreaInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_savePointId());
            writer.Write(value.savePointId);
            writer.WriteRaw(GetSpan_respawnPosition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Serialize(ref writer, value.respawnPosition, options);
            writer.WriteRaw(GetSpan_respawnRotation());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Quaternion>(formatterResolver).Serialize(ref writer, value.respawnRotation, options);
        }

        public global::ProjectCronos.SaveAreaInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __savePointId__ = default(int);
            var __respawnPosition__ = default(global::UnityEngine.Vector3);
            var __respawnRotation__ = default(global::UnityEngine.Quaternion);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_savePointId().Slice(1))) { goto FAIL; }

                        __savePointId__ = reader.ReadInt32();
                        continue;
                    case 15:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5795701030854550898UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 31084746153489263UL) { goto FAIL; }

                                __respawnPosition__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 5939816218930406770UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 31084746152965231UL) { goto FAIL; }

                                __respawnRotation__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Quaternion>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            var ____result = new global::ProjectCronos.SaveAreaInfo(__savePointId__, __respawnPosition__, __respawnRotation__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
