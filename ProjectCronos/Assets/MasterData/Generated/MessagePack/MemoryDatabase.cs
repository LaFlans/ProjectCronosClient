// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using Generated.Tables;

namespace Generated
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public DictionaryTable DictionaryTable { get; private set; }
        public EnemyDataTable EnemyDataTable { get; private set; }
        public ItemDataTable ItemDataTable { get; private set; }
        public PlayerDataTable PlayerDataTable { get; private set; }
        public SampleTable SampleTable { get; private set; }
        public SaveAreaDataTable SaveAreaDataTable { get; private set; }
        public ShopItemDataTable ShopItemDataTable { get; private set; }
        public SoundTable SoundTable { get; private set; }
        public TestTable TestTable { get; private set; }

        public MemoryDatabase(
            DictionaryTable DictionaryTable,
            EnemyDataTable EnemyDataTable,
            ItemDataTable ItemDataTable,
            PlayerDataTable PlayerDataTable,
            SampleTable SampleTable,
            SaveAreaDataTable SaveAreaDataTable,
            ShopItemDataTable ShopItemDataTable,
            SoundTable SoundTable,
            TestTable TestTable
        )
        {
            this.DictionaryTable = DictionaryTable;
            this.EnemyDataTable = EnemyDataTable;
            this.ItemDataTable = ItemDataTable;
            this.PlayerDataTable = PlayerDataTable;
            this.SampleTable = SampleTable;
            this.SaveAreaDataTable = SaveAreaDataTable;
            this.ShopItemDataTable = ShopItemDataTable;
            this.SoundTable = SoundTable;
            this.TestTable = TestTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.DictionaryTable = ExtractTableData<Dictionary, DictionaryTable>(header, databaseBinary, options, xs => new DictionaryTable(xs));
            this.EnemyDataTable = ExtractTableData<EnemyData, EnemyDataTable>(header, databaseBinary, options, xs => new EnemyDataTable(xs));
            this.ItemDataTable = ExtractTableData<ItemData, ItemDataTable>(header, databaseBinary, options, xs => new ItemDataTable(xs));
            this.PlayerDataTable = ExtractTableData<PlayerData, PlayerDataTable>(header, databaseBinary, options, xs => new PlayerDataTable(xs));
            this.SampleTable = ExtractTableData<Sample, SampleTable>(header, databaseBinary, options, xs => new SampleTable(xs));
            this.SaveAreaDataTable = ExtractTableData<SaveAreaData, SaveAreaDataTable>(header, databaseBinary, options, xs => new SaveAreaDataTable(xs));
            this.ShopItemDataTable = ExtractTableData<ShopItemData, ShopItemDataTable>(header, databaseBinary, options, xs => new ShopItemDataTable(xs));
            this.SoundTable = ExtractTableData<Sound, SoundTable>(header, databaseBinary, options, xs => new SoundTable(xs));
            this.TestTable = ExtractTableData<Test, TestTable>(header, databaseBinary, options, xs => new TestTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.DictionaryTable = ExtractTableData<Dictionary, DictionaryTable>(header, databaseBinary, options, xs => new DictionaryTable(xs)),
                () => this.EnemyDataTable = ExtractTableData<EnemyData, EnemyDataTable>(header, databaseBinary, options, xs => new EnemyDataTable(xs)),
                () => this.ItemDataTable = ExtractTableData<ItemData, ItemDataTable>(header, databaseBinary, options, xs => new ItemDataTable(xs)),
                () => this.PlayerDataTable = ExtractTableData<PlayerData, PlayerDataTable>(header, databaseBinary, options, xs => new PlayerDataTable(xs)),
                () => this.SampleTable = ExtractTableData<Sample, SampleTable>(header, databaseBinary, options, xs => new SampleTable(xs)),
                () => this.SaveAreaDataTable = ExtractTableData<SaveAreaData, SaveAreaDataTable>(header, databaseBinary, options, xs => new SaveAreaDataTable(xs)),
                () => this.ShopItemDataTable = ExtractTableData<ShopItemData, ShopItemDataTable>(header, databaseBinary, options, xs => new ShopItemDataTable(xs)),
                () => this.SoundTable = ExtractTableData<Sound, SoundTable>(header, databaseBinary, options, xs => new SoundTable(xs)),
                () => this.TestTable = ExtractTableData<Test, TestTable>(header, databaseBinary, options, xs => new TestTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.DictionaryTable.GetRawDataUnsafe());
            builder.Append(this.EnemyDataTable.GetRawDataUnsafe());
            builder.Append(this.ItemDataTable.GetRawDataUnsafe());
            builder.Append(this.PlayerDataTable.GetRawDataUnsafe());
            builder.Append(this.SampleTable.GetRawDataUnsafe());
            builder.Append(this.SaveAreaDataTable.GetRawDataUnsafe());
            builder.Append(this.ShopItemDataTable.GetRawDataUnsafe());
            builder.Append(this.SoundTable.GetRawDataUnsafe());
            builder.Append(this.TestTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.DictionaryTable.GetRawDataUnsafe());
            builder.Append(this.EnemyDataTable.GetRawDataUnsafe());
            builder.Append(this.ItemDataTable.GetRawDataUnsafe());
            builder.Append(this.PlayerDataTable.GetRawDataUnsafe());
            builder.Append(this.SampleTable.GetRawDataUnsafe());
            builder.Append(this.SaveAreaDataTable.GetRawDataUnsafe());
            builder.Append(this.ShopItemDataTable.GetRawDataUnsafe());
            builder.Append(this.SoundTable.GetRawDataUnsafe());
            builder.Append(this.TestTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                DictionaryTable,
                EnemyDataTable,
                ItemDataTable,
                PlayerDataTable,
                SampleTable,
                SaveAreaDataTable,
                ShopItemDataTable,
                SoundTable,
                TestTable,
            });

            ((ITableUniqueValidate)DictionaryTable).ValidateUnique(result);
            ValidateTable(DictionaryTable.All, database, "Key", DictionaryTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemyDataTable).ValidateUnique(result);
            ValidateTable(EnemyDataTable.All, database, "Key", EnemyDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemDataTable).ValidateUnique(result);
            ValidateTable(ItemDataTable.All, database, "Id", ItemDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)PlayerDataTable).ValidateUnique(result);
            ValidateTable(PlayerDataTable.All, database, "Key", PlayerDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SampleTable).ValidateUnique(result);
            ValidateTable(SampleTable.All, database, "Id", SampleTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SaveAreaDataTable).ValidateUnique(result);
            ValidateTable(SaveAreaDataTable.All, database, "Id", SaveAreaDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ShopItemDataTable).ValidateUnique(result);
            ValidateTable(ShopItemDataTable.All, database, "Id", ShopItemDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SoundTable).ValidateUnique(result);
            ValidateTable(SoundTable.All, database, "Key", SoundTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)TestTable).ValidateUnique(result);
            ValidateTable(TestTable.All, database, "Id", TestTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "m_dictionary":
                    return db.DictionaryTable;
                case "m_enemy_data":
                    return db.EnemyDataTable;
                case "m_item":
                    return db.ItemDataTable;
                case "m_player_data":
                    return db.PlayerDataTable;
                case "m_sample":
                    return db.SampleTable;
                case "m_save_area_data":
                    return db.SaveAreaDataTable;
                case "m_shop_item":
                    return db.ShopItemDataTable;
                case "m_sound":
                    return db.SoundTable;
                case "m_test":
                    return db.TestTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("m_dictionary", Generated.Tables.DictionaryTable.CreateMetaTable());
            dict.Add("m_enemy_data", Generated.Tables.EnemyDataTable.CreateMetaTable());
            dict.Add("m_item", Generated.Tables.ItemDataTable.CreateMetaTable());
            dict.Add("m_player_data", Generated.Tables.PlayerDataTable.CreateMetaTable());
            dict.Add("m_sample", Generated.Tables.SampleTable.CreateMetaTable());
            dict.Add("m_save_area_data", Generated.Tables.SaveAreaDataTable.CreateMetaTable());
            dict.Add("m_shop_item", Generated.Tables.ShopItemDataTable.CreateMetaTable());
            dict.Add("m_sound", Generated.Tables.SoundTable.CreateMetaTable());
            dict.Add("m_test", Generated.Tables.TestTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}