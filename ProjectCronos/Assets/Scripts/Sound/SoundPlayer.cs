using System.Collections.Generic;using UnityEngine;
namespace ProjectCronos{    /// <summary>    /// サウンドプレイヤー    /// </summary>    internal class SoundPlayer : MonoBehaviour    {        const int SOURCE_BGM_NUM = 1;        const int SOURCE_SE_NUM = 8;        float masterVolume = 0.1f;        List<SoundSource> bgmSources;        List<SoundSource> seSources;        [SerializeField]        Transform sourceSeParent;        [SerializeField]        Transform sourceBgmParent;

        /// <summary>        /// 初期化        /// </summary>        public bool Init()        {            // リスト初期化            bgmSources = new List<SoundSource>();            seSources = new List<SoundSource>();            // SEのSoundSourceを作成            for (int i = 0; i < SOURCE_SE_NUM; i++)            {                var obj = new GameObject("SoundSource").AddComponent<SoundSource>();                obj.transform.SetParent(sourceSeParent);                obj.Init();                seSources.Add(obj);            }            // BGMのSoundSourceを作成            for (int i = 0; i < SOURCE_BGM_NUM; i++)            {                var obj = new GameObject("SoundSource").AddComponent<SoundSource>();                obj.transform.SetParent(sourceBgmParent);                obj.Init();                bgmSources.Add(obj);            }            // サウンドソースのボリューム設定            SetSourceVolume();            return true;        }        /// <summary>        /// BGM再生        /// </summary>        /// <param name="key">再生したいサウンドデータのキー</param>        public void Play(string key)        {            var data = MasterDataManager.DB.SoundTable.FindByKey(key);            switch ((EnumCollection.Sound.SOUND_TYPE)data.Type)            {                case EnumCollection.Sound.SOUND_TYPE.BGM:                    PlayBGM(data.Path);                    break;                case EnumCollection.Sound.SOUND_TYPE.SE:                    PlaySE(data.Path);                    break;                case EnumCollection.Sound.SOUND_TYPE.MAXMUM:                    Debug.Log($"BGMかSEを指定してね！KEY:{data.Key}");                    break;            }        }        /// <summary>        /// マスターボリュームを設定する        /// </summary>        /// <param name="val">設定する値</param>        public void SetMasterVolume(float val)        {            masterVolume = val;            // サウンドソースのボリューム設定            SetSourceVolume();        }        /// <summary>        /// BGM再生        /// </summary>        /// <param name="path">対象のリソースのAddressableパス</param>        void PlayBGM(string path)        {            var clip = AddressableManager.instance.GetLoadedClip(path);            //　nullチェック            if (clip == null)            {                Debug.Log("再生しようとしているクリップがnullだよ…");                return;            }
            foreach (var item in bgmSources)            {                if (item.IsPlaying())                {
                    // FIXME: 今はすぐに停止して再生しているが、フェードインアウトを入れる
                    item.Stop();
                }

                item.Play(clip);
            }        }        /// <summary>        /// SE再生        /// </summary>        /// <param name="path">対象のリソースのAddressableパス</param>        void PlaySE(string path)        {            var clip = AddressableManager.instance.GetLoadedClip(path);            //　nullチェック            if (clip == null)            {                Debug.Log("再生しようとしているクリップがnullだよ…");                return;            }            foreach (var item in seSources)            {                if (!item.IsPlaying())                {                    item.Play(clip);                    break;                }            }        }        /// <summary>        /// サウンドソースのボリューム設定        /// </summary>        void SetSourceVolume()        {
            var volume = masterVolume;

#if UNITY_EDITOR
            var settings = ProjectCronosSettings.GetSerializedSettings();
            var result = settings.FindProperty("IsMuteSound").boolValue;
            if (result)
            {
                volume = 0.0f;
            }
#endif
            foreach (var item in bgmSources)            {                item.SetVolume(volume);            }            foreach (var item in seSources)            {                item.SetVolume(volume);            }        }    }}